{"ast":null,"code":"import _slicedToArray from \"/Users/saransu/Test/server/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/saransu/Test/server/src/WebSocket.js\";\nimport React, { Fragment, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction WebSocketWrapper(props) {\n  console.log(\"Rendering Web Socket\");\n  console.log(props);\n\n  const _useState = useState(new WebSocket(props.url, props.protocol)),\n        _useState2 = _slicedToArray(_useState, 2),\n        ws = _useState2[0],\n        setWebSocket = _useState2[1];\n\n  const _useState3 = useState(1),\n        _useState4 = _slicedToArray(_useState3, 2),\n        attempts = _useState4[0],\n        setAttempts = _useState4[1];\n\n  let timeoutID = null;\n\n  function logMessages(message) {\n    if (props.debug === true) {\n      console.log(message);\n    }\n  }\n\n  function generateInterval(k) {\n    if (props.reconnectIntervalInMilliSeconds > 0) {\n      return props.reconnectIntervalInMilliSeconds;\n    }\n\n    return Math.min(30, Math.pow(2, k) - 1) * 1000;\n  }\n\n  useEffect(() => {\n    logMessages(\"Component Mounted\");\n    props.shareMethods(() => {\n      ws.send(props.message);\n    });\n    setupWebsocket();\n  });\n  useEffect(() => {\n    return () => {\n      logMessages(\"Component Will Unmount\");\n      clearTimeout(timeoutID);\n      ws.close();\n    };\n  }, []);\n\n  function setupWebsocket() {\n    ws.onopen = () => {\n      logMessages('Websocket connected');\n\n      if (typeof props.onOpen === 'function') {\n        props.onOpen();\n      }\n    };\n\n    ws.onmessage = evt => {\n      props.onMessage(evt.data);\n    };\n\n    ws.onclose = () => {\n      logMessages('Websocket disconnected');\n\n      if (typeof props.onClose === 'function') {\n        props.onClose();\n      }\n\n      if (props.reconnect) {\n        let time = generateInterval(attempts);\n        timeoutID = setTimeout(() => {\n          setAttempts(attempts + 1);\n          setWebSocket(new WebSocket(props.url, props.protocol));\n          setupWebsocket();\n        }, time);\n      }\n    };\n  }\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  });\n}\n\nWebSocketWrapper.defaultProps = {\n  debug: false,\n  reconnect: true\n};\nWebSocketWrapper.propTypes = {\n  url: PropTypes.string.isRequired,\n  onMessage: PropTypes.func.isRequired,\n  onOpen: PropTypes.func,\n  onClose: PropTypes.func,\n  debug: PropTypes.bool,\n  reconnect: PropTypes.bool,\n  protocol: PropTypes.string,\n  shareMethods: PropTypes.func,\n  message: PropTypes.string,\n  reconnectIntervalInMilliSeconds: PropTypes.number\n};\nexport default WebSocketWrapper;","map":{"version":3,"sources":["/Users/saransu/Test/server/src/WebSocket.js"],"names":["React","Fragment","useEffect","useState","PropTypes","WebSocketWrapper","props","console","log","WebSocket","url","protocol","ws","setWebSocket","attempts","setAttempts","timeoutID","logMessages","message","debug","generateInterval","k","reconnectIntervalInMilliSeconds","Math","min","pow","shareMethods","send","setupWebsocket","clearTimeout","close","onopen","onOpen","onmessage","evt","onMessage","data","onclose","onClose","reconnect","time","setTimeout","defaultProps","propTypes","string","isRequired","func","bool","number"],"mappings":"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","sourcesContent":["import React, {Fragment, useEffect, useState} from 'react';\nimport PropTypes from 'prop-types';\n\nfunction WebSocketWrapper(props) {\n    console.log(\"Rendering Web Socket\");\n    console.log(props);\n    const [ws, setWebSocket] = useState(new WebSocket(props.url, props.protocol));\n    const [attempts, setAttempts] = useState(1);\n    let timeoutID = null;\n\n    function logMessages(message) {\n        if (props.debug === true) {\n            console.log(message);\n        }\n    }\n\n    function generateInterval(k) {\n        if (props.reconnectIntervalInMilliSeconds > 0) {\n            return props.reconnectIntervalInMilliSeconds;\n        }\n        return Math.min(30, (Math.pow(2, k) - 1)) * 1000;\n    }\n\n    useEffect(() => {\n        logMessages(\"Component Mounted\");\n        props.shareMethods(() => {ws.send(props.message)});\n        setupWebsocket();\n    });\n\n    useEffect(() => {\n        return () => {\n            logMessages(\"Component Will Unmount\");\n            clearTimeout(timeoutID);\n            ws.close();\n        }\n    }, []);\n\n    function setupWebsocket() {\n        ws.onopen = () => {\n            logMessages('Websocket connected');\n            if (typeof props.onOpen === 'function') {\n                props.onOpen();\n            }\n        };\n\n        ws.onmessage = (evt) => {\n            props.onMessage(evt.data);\n        };\n\n        ws.onclose = () => {\n            logMessages('Websocket disconnected');\n            if (typeof props.onClose === 'function') {\n                props.onClose();\n            }\n            if (props.reconnect) {\n                let time = generateInterval(attempts);\n                timeoutID = setTimeout(() => {\n                    setAttempts(attempts + 1);\n                    setWebSocket(new WebSocket(props.url, props.protocol));\n                    setupWebsocket();\n                }, time);\n            }\n        }\n    }\n\n    return (\n        <Fragment/>\n    )\n\n}\n\nWebSocketWrapper.defaultProps = {\n    debug: false,\n    reconnect: true\n};\n\nWebSocketWrapper.propTypes = {\n    url: PropTypes.string.isRequired,\n    onMessage: PropTypes.func.isRequired,\n    onOpen: PropTypes.func,\n    onClose: PropTypes.func,\n    debug: PropTypes.bool,\n    reconnect: PropTypes.bool,\n    protocol: PropTypes.string,\n    shareMethods: PropTypes.func,\n    message: PropTypes.string,\n    reconnectIntervalInMilliSeconds: PropTypes.number\n};\n\nexport default WebSocketWrapper;"]},"metadata":{},"sourceType":"module"}